{"meta":{"title":"个人博客","subtitle":null,"description":null,"author":"Luo Qian","url":"http://luoqian67.github.io/blog"},"pages":[],"posts":[{"title":"python直接赋值、深拷贝和浅拷贝","slug":"python直接赋值、深拷贝和浅拷贝","date":"2018-08-07T02:13:05.542Z","updated":"2018-08-07T02:59:34.591Z","comments":true,"path":"2018/08/07/python直接赋值、深拷贝和浅拷贝/","link":"","permalink":"http://luoqian67.github.io/blog/2018/08/07/python直接赋值、深拷贝和浅拷贝/","excerpt":"","text":"","categories":[{"name":"python","slug":"python","permalink":"http://luoqian67.github.io/blog/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://luoqian67.github.io/blog/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://luoqian67.github.io/blog/categories/python/"}]},{"title":"win10win7打开软件提示系统资源不足,无法完成请求服务的解决方法","slug":"win10win7打开软件提示系统资源不足,无法完成请求服务的解决方法","date":"2018-08-04T03:25:13.056Z","updated":"2018-08-07T02:57:44.396Z","comments":true,"path":"2018/08/04/win10win7打开软件提示系统资源不足,无法完成请求服务的解决方法/","link":"","permalink":"http://luoqian67.github.io/blog/2018/08/04/win10win7打开软件提示系统资源不足,无法完成请求服务的解决方法/","excerpt":"","text":"有些win7、win10用户莫名的遇到了一个问题，就是安装部分软件的时候提示系统资源不足,无法完成请求服务，刚开始以为是系统缺少了某些组件，结果发现是国外杀毒迈克菲（McAfee）在捣鬼。 关闭迈克菲的实时防护或者卸载即可。","categories":[{"name":"杂项教程","slug":"杂项教程","permalink":"http://luoqian67.github.io/blog/categories/杂项教程/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://luoqian67.github.io/blog/tags/windows/"}],"keywords":[{"name":"杂项教程","slug":"杂项教程","permalink":"http://luoqian67.github.io/blog/categories/杂项教程/"}]},{"title":"关于求N以内素数的python实现以及优化方法","slug":"关于求N以内素数的python实现以及优化方法","date":"2018-08-04T01:00:00.000Z","updated":"2018-08-07T02:54:19.807Z","comments":true,"path":"2018/08/04/关于求N以内素数的python实现以及优化方法/","link":"","permalink":"http://luoqian67.github.io/blog/2018/08/04/关于求N以内素数的python实现以及优化方法/","excerpt":"","text":"一、素数的定义​ 质数（prime number）又称素数，有无限个。除了1和它本身以外不再有其他的除数整除。从定义知道；1不是素数，最小的素数是2。 二、N以内素数常用实现方法​ 首先教科书写法（暂时不做任何代码优化）：1234567891011121314import mathdef prime(n): if n &lt;= 1: return 0 #for i in range(2,int(math.sqrt(n)+1)): for i in range(2,n): if n%i == 0: return 0 return 1if __name__ == \"__main__\": n = int(input(\"&gt;&gt;\")) for i in range(2,n+1): if prime(i): print (i) ​ 代码中注释行是取了[2,√n+1]作为除数范围，通过对比测试，显然，[2,√n+1]范围下，效率快了很多。 三、优化方法原理层面​ 1、除了2以外，其余的偶数显然不可能是素数，再来看奇数，1不是素数，从3开始看，除了3以外，其余能被3整除的都是合数，再看5，除了5以外，其余能被5整除的都是合数，加起来，一共在[2,√n+1]范围内排除了近3/4的计算量。 ​ 2、另外使用埃拉托斯特尼筛法（希腊语：κόσκινον Ἐρατοσθένους，英语：sieve of Eratosthenes ），简称埃氏筛，也有人称素数筛。这是一种简单且历史悠久的筛法，用来找出一定范围内所有的素数。 所使用的原理是从2开始，将每个素数的各个倍数，标记成合数。一个素数的各个倍数，是一个差为此素数本身的等差数列。 算式： 给出要筛数值的范围n，找出$\\sqrt{n}$以内的素数 p~1~,p~2~,…,p~k~ 先用2去筛，即把2留下，把2的倍数剔除掉；再用下一个素数，也就是3筛，把3留下，把3的倍数剔除掉；接下去用下一个素数5筛，把5留下，把5的倍数剔除掉；不断重复下去……。 1234567891011def eratosthenes(n): IsPrime = [True] * (n + 1) IsPrime[1] = False for i in range(2, int(n ** 0.5) + 1): if IsPrime[i]: for j in range(i * 2, n + 1, i): IsPrime[j] = False return &#123;x for x in range(2, n + 1) if IsPrime[x]&#125;if __name__ == \"__main__\": print (eratosthenes(n)) 代码层面第一种优化思路： 12345678910111213141516171819import mathdef prime(n): if n%2 == 0: return n==2 if n%3 == 0: return n==3 if n%5 == 0: return n==5 for p in range(7,int(math.sqrt(n))+1,2): #只考虑奇数作为可能因子 if n%p == 0: return 0 return 1if __name__ == \"__main__\": n = int(input(\"&gt;&gt;\")) for i in range(2,n+1): #1不是素数,从2开始 if prime(i): print i ​ 再来实现第二种思路，代码如下： 123456789101112131415161718#寻找n以内的素数，看执行时间，例子100000内的素数def prime(n): flag = [1]*(n+2) p=2 while(p&lt;=n): print p for i in range(2*p,n+1,p): flag[i] = 0 while 1: p += 1 if(flag[p]==1): break# testif __name__ == \"__main__\": n = int(input(\"&gt;&gt;\")) prime(n) 统一测试下差异很清楚。第二种方法要优于第一种，再优化下代码首先，将range换成xrange，再测试下：两种方法速度都有提升。range和xrange的差异，range是一次性连续返回一个列表，而xrange是每次只生成一个，并且不保留上次生成的值。 ​致命错误:对于range(2*p,n+1,p)，还有一种实现方法，range(2*p,n+1)[::p]，但这两种写法，完全不相干，range(2*p,n+1,p)返回的列表就是按照p步长来生成的，而range(2*p,n+1)[::p]，是生成了步长为1的列表，最后列表执行切片操作，只取p步长的值返回，显然没有range(2*p,n+1,p)的实现更为直接，两者虽然返回值一样，但经过实际测试发现，效率差异非常大，甚至可以颠覆算法的优势。 ​在这几种方案中，最后一种速度最快，效率最高，但有个应用前提，就是待搜索列表必须是有序且连续的，所以比较适合N以内符合某条件的数字。","categories":[{"name":"python","slug":"python","permalink":"http://luoqian67.github.io/blog/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://luoqian67.github.io/blog/tags/python/"},{"name":"素数","slug":"素数","permalink":"http://luoqian67.github.io/blog/tags/素数/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://luoqian67.github.io/blog/categories/python/"}]},{"title":"按位与、或、非、异或总结","slug":"按位与、或、非、异或的总结","date":"2018-07-30T14:15:13.381Z","updated":"2018-08-07T02:57:28.564Z","comments":true,"path":"2018/07/30/按位与、或、非、异或的总结/","link":"","permalink":"http://luoqian67.github.io/blog/2018/07/30/按位与、或、非、异或的总结/","excerpt":"","text":"位运算符有：&amp;(按位与)、|(按位或)、^(按位异或)、~ (按位取反)。优先级从高到低，依次为~、&amp;、^、|1. 按位与操作 0&amp;0=0; 0&amp;1=0; 1&amp;0=0; 1&amp;1=1 例子：10&amp;9： 0000 1010 &amp; 0000 1001 = 0000 1000 = 8 负数按补码形式参加按位与运算 “与运算”的特殊用途： （1）清零。如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。 （2）取一个数中指定位方法：找一个数，对应X要取的位，该数的对应位为1，其余位为零，此数与X进行“与运算”可以得到X中的指定位。例：设X=10101110，取X的低4位，用 X &amp; 0000 1111 = 0000 1110 即可得到；还可用来取X的2、4、6位。 2. 按位或运算符（|） 参加运算的两个对象，按二进制位进行“或”运算。 运算规则：0|0=0； 0|1=1； 1|0=1； 1|1=1； 即 ：参加运算的两个对象只要有一个为1，其值为1。 例如:3|5 即 0000 0011 | 0000 0101 = 0000 0111 因此，3|5的值得7。 另，负数按补码形式参加按位或运算。 “或运算”特殊作用： （1）常用来对一个数据的某些位置1。 方法：找到一个数，对应X要置1的位，该数的对应位为1，其余位为零。此数与X相或可使X中的某些位置1。 例：将X=10100000的低4位置1 ，用 X | 0000 1111 = 1010 1111即可得到。 3. 异或运算符（^） 参加运算的两个数据，按二进制位进行“异或”运算。 运算规则：0^0=0； 0^1=1； 1^0=1； 1^1=0； 即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。 例如：10^-9 即 0000 1010 ^ 1111 0111 = 1111 1101(补码) 原码即为1000 0011 即10^-9 = -3 “异或运算”的特殊作用： （1）使特定位翻转 找一个数，对应X要翻转的各位，该数的对应位为1，其余位为零，此数与X对应位异或即可。 例：X=10101110，使X低4位翻转，用X ^ 0000 1111 = 1010 0001即可得到。 （2）与0相异或，保留原值 ，X ^ 0000 0000 = 1010 1110。 交换a和b1234567a=a^bb=b^aa=a^ba= a-bb= a+ba= b-a 4. 取反运算符（~） 参加运算的一个数据，按二进制位进行“取反”运算。 运算规则：~1=0； ~0=1； 即：对一个二进制数按位取反，即将0变1，1变0。 使一个数的最低位为零，可以表示为：a&amp;~1。 ~1的值为1111111111111110，再按“与”运算，最低位一定为0。因为“~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。 5. 左移运算符（&lt;&lt;） 将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。 例：a = a &lt;&lt; 2 将a的二进制位左移2位，右补0， 左移1位后a = a * 2; 若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。 6. 右移运算符（&gt;&gt;） 将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。 操作数每右移一位，相当于该数除以2。 例如：a = a &gt;&gt; 2 将a的二进制位右移2位， 左补0 or 补1 得看被移数是正还是负。 >> 运算符把 expression1 的所有位向右移 expression2 指定的位数。expression1 的符号位被用来填充右移后左边空出来的位。向右移出的位被丢弃。 例如，下面的代码被求值后，temp 的值是 -4： var temp = -14 &gt;&gt; 2 -14 （即二进制的 11110010）右移两位等于 -4 （即二进制的 11111100）。 无符号右移运算符（&gt;&gt;&gt;） >>> 运算符把 expression1 的各个位向右移 expression2 指定的位数。右移后左边空出的位用零来填充。移出右边的位被丢弃。 7. 复合赋值运算符 位运算符与赋值运算符结合，组成新的复合赋值运算符，它们是： &amp;= 例：a &amp;= b 相当于a=a &amp; b |= 例：a |= b 相当于a=a | b >>= 例：a &gt;&gt;= b 相当于a=a &gt;&gt; b &lt;&lt;= 例：a &lt;&lt;= b 相当于a=a &lt;&lt; b ^= 例：a ^= b 相当于a=a ^ b 运算规则：和前面讲的复合赋值运算符的运算规则相似。 不同长度的数据进行位运算 如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，然后进行位运算。 以“与”运算为例说明如下：我们知道在C语言中long型占4个字节，int型占2个字节，如果一个long型数据与一个int型数据进行“与”运算，右端对齐后，左边不足的位依下面三种情况补足， （1）如果整型数据为正数，左边补16个0。（2）如果整型数据为负数，左边补16个1。 （3）如果整形数据为无符号数，左边也补16个0。 如：long a=123;int b=1;计算a &amp; b。a 0000 0000 0111 1011 &amp;b 0000 0000 0000 0001= 0000 0000 0000 0001如：long a=123;int b=-1;计算a &amp; b。a 0000 0000 0111 1011 &amp;b 1111 1111 1111 1111= 0000 0000 0111 1011如：long a=123;unsigned int b=1;计算a &amp; b。a 0000 0000 0111 1011b 0000 0000 0000 0001= 0000 0000 0000 0001 8. 原码、反码、补码，负数表示法 原码:5 =&gt; 0b101，1 =&gt; 0b1 ，-1 =&gt; -0b1， bin(-1) 反码: 正数的反码与原码相同；负数的反码符号位不变其余按位取反 补码: 正数的补码与原码相同；负数的补码符号位不变其余按位取反后+1","categories":[{"name":"python","slug":"python","permalink":"http://luoqian67.github.io/blog/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://luoqian67.github.io/blog/tags/python/"},{"name":"按位计算","slug":"按位计算","permalink":"http://luoqian67.github.io/blog/tags/按位计算/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://luoqian67.github.io/blog/categories/python/"}]},{"title":"centos6下部署Java Web项目","slug":"centos6下部署Java Web项目","date":"2018-07-28T12:58:17.000Z","updated":"2018-08-07T02:58:51.022Z","comments":true,"path":"2018/07/28/centos6下部署Java Web项目/","link":"","permalink":"http://luoqian67.github.io/blog/2018/07/28/centos6下部署Java Web项目/","excerpt":"","text":"在云服务器上安装好系统后： 1.先查看系统上有无原有的旧版本的mysql；tomcat；java。 若有则先卸载；卸载命令使用12yum -y remove mysql*;yum -y remove mysql*; 2.附上能下载的jdk1.7的链接，先下载jdk1.7后tomcat7放在本地目录下； #wget http://zhibo100.oss-cn-hangzhou.aliyuncs.com/software/jdk-7u79-linux-x64.tar.gz #wget http://zhibo100.oss-cn-hangzhou.aliyuncs.com/software/apache-tomcat-7.0.59.tar.gz 3.在/usr目录下建立一个java目录，java下建立jdk和tomcat目录用来存放解压好的文件； 4.解压jdk ，tomcat，命令如下； # tar -zxvf jdk-7u79-linux-x64.tar.gz -C /usr/java/ # tar -xzvf apache-tomcat-7.0.59.tar.gz -C /usr/java/tomcat/ 5.配置环境变量 配置JAVA环境变量并检测 1vim /etc/profile 在文件末尾加上 #java JAVA_HOME=/usr/java/jdk1.7.0_79 JRE_HOME=${JAVA_HOME}/jre CLASS_PATH=${JAVA_HOME}/lib PATH=$PATH:${JAVA_HOME}/bin export PATH JAVA_HOME CLASS_PATH PATH 保存退出 6.刷新环境变量123456789[root@luo ~]# source /etc/profile[root@luo ~]# java -versionjava version &quot;1.7.0_79&quot;Java(TM) SE Runtime Environment (build 1.7.0_79-b15)Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode) 如图说明Java安装成功。 7.开启tomcat：123cd /usr/java/tomcat/apache-tomcat-7.0.59/bin/./startup.sh 验证能否访问，在浏览器下输入localhost：8080 能出现tomcat的页面就行了。 设置tomcat自启动， 在进去 vim /etc/rc.d/rc.local 最下面加入：12345export JDK_HOME=/usr/java/jdk1.7.0_79export JAVA_HOME=/usr/java/jdk1.7.0_79/usr/java/tomcat/apache-tomcat-7.0.59/bin/startup.sh 然后重启服务器试验。 8.安装mysql；因为yum源中默认没有mysql的安装源，所以需要手动添加，按照下面的语句顺序能顺利安装。 1wget https://dev.mysql.com/get/mysql57-community-release-el6-9.noarch.rpm b.安装用来配置mysql的yum源的rpm包 123rpm -Uvh mysql57-community-release-el6-9.noarch.rpm或yum localinstall -y mysql57-community-release-el6-9.noarch.rpm 安装成功后在/etc/yum.repos.d/下会多出几个mysql的yum源的配置 然后安装mysql yum install mysql-community-server 开启mysql服务1service mysqld start mysql安装成功后创建的超级用户‘root‘@’localhost’的密码会被存储在/var/log/mysqld.log，可以使用如下命令查看密码1grep &apos;temporary password&apos; /var/log/mysqld.log 由于mysql修改密码时候如果你输入简单密码会报错，将不能修改密码，使用初始密码更改MySQL检测密码的规则，代码如下： 首先，进入MySQL 然后修改validate_password_policy参数的值（可参考mysql报错博客） 12345mysql&gt;setglobal validate_password_policy=0;setglobal validate_password_length=1;setglobal validate_password_mixed_case_count=2; 然后通过mysql安全设置 12345678910111213141516171819202122232425mysql_secure_installation修改密码# mysql_secure_installation Enter current password for root (enter for none): ← 回车 Set root password? [Y/n] ← 回车 New password: ← 123456 Re-enter new password: ← 123456 Remove anonymous users? [Y/n] ← 回车(删除匿名用户) Disallow root login remotely? [Y/n] ← 回车(禁止远程root登录) Remove test database and access to it? [Y/n] ← 回车(删除test库) Reload privilege tables now? [Y/n] ← 回车 Thanks for using MySQL! # mysql -u root -p Enter password:123456 设置远程登录： CREATE USER &apos;mysql&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION; 清除缓存：mysql&gt; flush privileges; 设置默认编码集 1234567# vim /etc/my.cnf character-set-server=utf8# /etc/init.d/mysqld restart # mysqld --version 最后把导出的war文件放到服务器中tomcat下的webapps目录下即可。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://luoqian67.github.io/blog/categories/Linux/"}],"tags":[{"name":"Linux，Java","slug":"Linux，Java","permalink":"http://luoqian67.github.io/blog/tags/Linux，Java/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://luoqian67.github.io/blog/categories/Linux/"}]},{"title":"Linux基础-权限管理","slug":"Linux基础-权限管理","date":"2018-07-28T00:00:00.000Z","updated":"2018-08-07T02:58:30.818Z","comments":true,"path":"2018/07/28/Linux基础-权限管理/","link":"","permalink":"http://luoqian67.github.io/blog/2018/07/28/Linux基础-权限管理/","excerpt":"","text":"Linux基础-权限管理一.权限管理1.用户权限：认证：1.1 Authentication；授权：Authorization；审计：Adition 1.2 Linux用户和组的主要配置文件： /etc/passwd：用户及其属性信息（名称、UID、主组ID等） /etc/group：组及其属性信息 /etc/shadow：用户密码及其相关属性 /etc/gshadow：组密码及其相关属性 1.3 安全上下文：进程代表用户在进行：谁启动了进程，进程就拥有谁的身份（以进程（process）发起者的身份运行）。 root:/bin/cat mage:/bin/cat 1.4 用户1.4.1 用户User： 令牌token,identity Linux用户：Username/UID 用户级别： 管理员：root, 0 普通用户：1-65535 系统用户：1-499, 1-999 （CentOS7） 对守护进程获取资源进行权限分配 登录用户:500+, 1000+（CentOS7） 交互式登录 1.4.2 passwd文件格式： login name：登录用名（wang） passwd：密码 (x) UID：用户身份编号 (1000) GID：登录默认所在组编号 (1000) GECOS：用户全名或注释 home directory：用户主目录 (/home/wang) shell：用户默认使用shell (/bin/bash) 123tcpdump:x:72:72::/:/sbin/nologinvampire:x:500:500:vampire:/home/vampire:/bin/bashmysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/false 1.4.3 shadow文件格式： 登录用名 用户密码:一般用sha512加密 从1970年1月1日起到密码最近一次被更改的时间 密码再过几天可以被变更（0表示随时可被变更） 密码再过几天必须被变更（99999表示永不过期） 密码过期前几天系统提醒用户（默认为一周） 密码过期几天后帐号会被锁定 从1970年1月1日算起，多少天后帐号失效 123tcpdump:!!:17735::::::vampire:$6$yk7XOpZX0ZngOz6D$qVI/.Q7Ch7M.KRfjsPC. WTiN9w2qJgUofENaFlnLxXpvzIN/lICVwcIme1b3LHMixqXxnEIGkgepuUIpsoadU1:1773 5:0:99999:7:::mysql:!!:17737:::::: 1.4.4 用户创建语法：useradd [options] LOGIN -u UID -o 配合-u 选项，不检查UID的唯一性 -g GID：指明用户所属基本组，可为组名，也可以GID -c “COMMENT”：用户的注释信息 -d HOME_DIR: 以指定的路径(不存在)为家目录 -s SHELL: 指明用户的默认shell程序可用列表在/etc/shells文件中 -G GROUP1[,GROUP2,…]：为用户指明附加组，组须事先存在 -N 不创建私用组做主组，使用users组做主组 -r: 创建系统用户 CentOS 6: ID&lt;500，CentOS 7: ID&lt;1000 -m 创建家目录，用于系统用户 -M 不创建家目录，用于非系统用户 1234[root@localhost ~]# useradd -u 111 luqoian -c &quot;vamp&quot; -s /bin/csh -m[root@localhost ~]# tail -1 /etc/passwdluqoian:x:111:501:vamp:/home/luqoian:/bin/csh[root@localhost ~]# 1.4.5 用户属性的修改：语法：`usermod [OPTION] login -u UID: 新UID -g GID: 新主组 -G GROUP1[,GROUP2,…[,GROUPN]]]：新附加组，原来的附加组将会被覆盖；若保留原有，则要同时使用-a选项 -s SHELL：新的默认SHELL -c ‘COMMENT’：新的注释信息 -d HOME: 新家目录不会自动创建；若要创建新家目录并移动原家数据，同时使用-m选项 -l login_name: 新的名字； -L: lock指定用户,在/etc/shadow 密码栏的增加 ! -U: unlock指定用户,将 /etc/shadow 密码栏的 ! 拿掉 -e YYYY-MM-DD: 指明用户账号过期日期 -f INACTIVE: 设定非活动期限 1.4.6 删除用户：语法：userdel [OPTION]... login -r: 删除用户家目录 1.4.7 切换用户或以其他用户身份执行命令语法：su [options...] [-] [user [args...]] 切换用户的方式： su UserName：非登录式切换，即不会读取目标用户的配置文件，不改变当前工作目录 su - UserName：登录式切换，会读取目标用户的配置文件，切换至家目录，完全切换 root su至其他用户无须密码；非root用户切换时需要密码 换个身份执行命令： su [-] UserName -c &#39;COMMAND&#39; 选项：-l --login`su -l UserName 相当于 su - UserName` 1.4.8 修改密码语法：passwd [OPTIONS] UserName:修改指定用户的密码 常用选项： -d:删除指定用户密码 -l:锁定指定用户 -u:解锁指定用户 -e:强制用户下次登录修改密码 -f: 强制操作 -n mindays: 指定最短使用期限 -x maxdays：最大使用期限 -w warndays：提前多少天开始警告 -i inactivedays：非活动期限 –stdin：从标准输入接收用户密码 echo “PASSWORD” | passwd –stdin USERNAME 1.5 组1.5.1 Linux组的类别 用户的主要组（primary group） 用户必须属于一个且只有一个主组 组名同用户名，且仅包含一个用户，私有组 用户的附加组（supplementary group） 一个用户可以属于零个或多个附加组 1.5.2 组group： Linux组：Groupname/GID 管理员组：root, 0 普通组： 系统组：1-499, 1-999（CENTOS7） 普通组：500+, 1000+（CENTOS7） 1.5.3 group文件格式 群组名称：就是群组名称 群组密码：通常不需要设定，密码是被记录在 /etc/gshadow GID：就是群组的 ID 以当前组为附加组的用户列表(分隔符为逗号) 1234[root@localhost ~]# cat /etc/grouproot:x:0:bin:x:1:bin,daemondaemon:x:2:bin,daemon 1.5.4 gshadow文件格式 群组名称：就是群组名称 群组密码： 组管理员列表：组管理员的列表，更改组密码和成员 以当前组为附加组的用户列表：(分隔符为逗号) 12345[root@localhost ~]# cat /etc/gshadowroot:::bin:::bin,daemondaemon:::bin,daemonsys:::bin,adm 1.5.5 创建组：语法：groupadd [OPTION]... group_name -g GID: 指明GID号；[GID_MIN, GID_MAX] -r: 创建系统组 CentOS 6: ID&lt;500 CentOS 7: ID&lt;1000 1.5.6 修改和删除组： 组属性修改：groupmod语法： [OPTION]... group12-n group_name: 新名字-g GID: 新的GID 组删除：groupdel groupdel GROUP 1.5.7 更改组密码1234567组密码：gpasswdgpasswd [OPTION] GROUP -a user 将user添加至指定组中 -d user 从指定组中移除用户user -A user1,user2,... 设置有管理权限的用户列表newgrp命令：临时切换主组 如果用户本不属于此组，则需要组密码 2 文件权限：2.1 文件的权限主要针对三类对进行定义 owner: 属主, u，文档所有者 group: 属组, g，文档所属组用户 other: 其他, o，其他用户 每个文件针对每类访问者都义了三种权限 r: Readable：读 w: Writable：写 x: eXcutable：执行 2.2 文件和目录权限的区别： 文件： r: 可使用文件查看类工具获取其内容 w: 可修改其内容 x: 可以把此文件提请内核启动为一个进程 目录： r: 可以使用ls查看此目录中文件列表 w: 可在此目录中创建文件，也可删除此目录中的文件 x: 可以使用ls -l查看此目录中文件列表，可以cd进入此目录 2.3 修改文件权限：12345678910chmod [OPTION]... OCTAL-MODE FILE... -R: 递归修改权限（改目录的时候想修改目录内部所有文件的权限，但是不建议）chmod [OPTION]... MODE[,MODE]... FILE... MODE： 修改一类用户的所有权限： u= g= o= ug= a= u=,g= 修改一类用户某位或某些位权限 u+ u- g+ g- o+ o- a+ a- + -chmod [OPTION]... --reference=RFILE FILE... （referance）参考RFILE文件的权限，将FILE的修改为同RFILE 2.4 修改文件的属组和属主： 修改文件的属主：chown chown [OPTION]… [OWNER][:[GROUP]] FILE… 用法： OWNER OWNER:GROUP :GROUP 命令中的冒号可用.替换 -R: 递归 语法：-chown [OPTION]... --reference=RFILE FILE... 修改文件的属组：chgrp 123chgrp [OPTION]... GROUP FILE...chgrp [OPTION]... --reference=RFILE FILE...-R 递归 注意： - (权限一定要给全，不然会从左边补全，例如如果给77，则默认为077） - (目录一定要有执行权限，普通文件不能随便给执行权限（防止一些恶意文件留后门）)， - (只写+w,只有属主加写权限) 2.5 新建文件和目录的默认权限 umask值 可以用来保留在创建文件权限 新建FILE权限: 666-umask 如果所得结果某位存在执行（奇数）权限，则将其权限+1 新建DIR权限: 777-umask 非特权用户umask是 002 root的umask 是 022 umask: 查看 umask #: 设定 umask 002 umask –S 模式方式显示 umask –p 输出可被调用 全局设置： /etc/bashrc 用户设置：~/.bashrc 2.6 访问控制列表 ACL：Access Control List，实现灵活的权限管理 除了文件的所有者，所属组和其它人，可以对更多的用户设置权限 CentOS7 默认创建的xfs和ext4文件系统具有ACL功能 CentOS7 之前版本，默认手工创建的ext4文件系统无ACL功能,需手动增加 tune2fs –o acl /dev/sdb1 mount –o acl /dev/sdb1 /mnt/test ACL生效顺序：所有者，自定义用户，自定义组，其他人 为多用户或者组的文件和目录赋予访问权限rwx mount -o acl /directory getfacl file |directory setfacl -m u:wang:rwx file|directory setfacl -Rm g:sales:rwX directory setfacl -M file.acl file|directory setfacl -m g:salesgroup:rw file| directory setfacl -m d:u:wang:rx directory setfacl -x u:wang file |directory setfacl -X file.acl directory123456789101112131415161718[root@localhost ~]# getfacl linux222.txt# file: linux222.txt# owner: root# group: root user::rw-group::r--other::r--[root@localhost ~]# setfacl -m u:vampire:wx linux222.txt[root@localhost ~]# getfacl linux222.txt# file: linux222.txt# owner: root# group: rootuser::rw-user:vampire:-wxgroup::r--mask::rwxother::r--","categories":[{"name":"Linux","slug":"Linux","permalink":"http://luoqian67.github.io/blog/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://luoqian67.github.io/blog/tags/Linux/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://luoqian67.github.io/blog/categories/Linux/"}]},{"title":"Linux基础-文件管理和重定向","slug":"Linux基础-文件管理和重定向","date":"2018-07-27T07:15:17.000Z","updated":"2018-08-07T02:58:10.335Z","comments":true,"path":"2018/07/27/Linux基础-文件管理和重定向/","link":"","permalink":"http://luoqian67.github.io/blog/2018/07/27/Linux基础-文件管理和重定向/","excerpt":"","text":"Linux基础-文件管理和重定向1. 每一个分区都是一个独立存在的文件系统2. 目录：路径映射符3. 文件文件有两种数据 元数据：描述数据的数据属性 metadata 数据：data FHS：文件系统层级结构标准 4. Linux下的文件类型 -：普通文件 d：目录文件 b：块设备 c：字符设备 l：符号链接文件 p：管道文件pip，FIFO（first in，first out） s：套接字文件：服务加IP端口，作为一个服务的入口。socket 5. 显示当前路径 每个shell和系统进程都有一个当前的工作目录 CWD:current work directory 显示当前shell CWD的绝对路径 pwd: printing working directory -P 显示真实物理路径 -L 显示链接路径（默认） 6. 绝对路径和相对路径绝对路径: 以正斜杠开始 完整的文件的位置路径 可用于任何想指定一个文件名的时候 相对路径名: 不以斜线开始 指定相对于当前工作目录或某目录的位置 可以作为一个简短的形式指定一个文件名 注： 基名:basename 目录名:dirname 7. cd命令cd 改变目录 使用绝对或相对路径： cd /home/wang/ cd home/wang 切换至父目录 ：cd .. 切换至当前用户主目录： cd 切换至以前的工作目录： cd - 选项：-P 相关的环境变量： 显示环境变量：printenv PWD：当前目录路径 OLDPWD：上一次目录路径 ~ ：当前用户家目录 ~mage ：用户mage家目录 ~+ ：当前工作目录 ~- ：前一个工作目录 8. 显示目录 列出当前目录的内容或指定目录(显示的数据都是元数据) 用法：ls [options] [files_or_dirs] 示例: ls -a ：包含隐藏文件 ls -l ：显示额外的信息 ls -R ：目录递归显示 ls -ld ： 目录和符号链接信息 ls -1 ：文件分行显示 ls –S ：按从大到小排序 ls –t ： 按mtime排序 ls –u ：配合-t选项，显示并按atime从新到旧排序 ls –U : 按目录存放顺序显示 ls –X : 按文件后缀排序 9. 查看文件状态:显示当前文件的时间戳 命令：stat 文件：metadata, data 三个时间戳： access time：访问时间，atime，读取文件内容 modify time: 修改时间, mtime，改变文件内容（数据） change time: 改变时间, ctime，元数据发生改变 注意：元数据发生变化，数据不一定变化数据发生变化，元数据一定变化 10. 文件通配符（对文件名做通配）(glob、globing、wildcard) * ：匹配零个或多个字符 ? ：匹配任何单个字符 [0-9] : 匹配数字范围 [a-z] ：字母 [A-Z] ：字母 [wang] : 匹配列表中的任何的一个字符 [^wang] : 匹配列表中的所有字符以外的字符 预定义的字符类：（帮助：man 7 glob） [:digit:]：任意数字，相当于0-9 [:lower:]：任意小写字母 [:upper:]：任意大写字母 [:alpha:]：任意大小写字母 [:alnum:]：任意数字或字母 [:blank:]：水平空白字符 [:space:]：水平或垂直空白字符 [:punct:]：标点符号 [:print:]：可打印字符 [:cntrl:]：控制（非打印）字符 [:graph:]：图形字符 [:xdigit:]：十六进制字符 11. touch命令：touch [OPTION]... FILE... -a 仅改变 atime和ctime -m 仅改变 mtime和ctime -t [[CC]YY]MMDDhhmm[.ss]指定atime和mtime的时间戳 -c 如果文件不存在，则不予创建 例如：touch -m -t 201806300000.00 /etc/passwd 1234567891011121314151617[root@localhost ~]# stat /etc/passwdFile: `/etc/passwd&apos;Size: 1677 Blocks: 8 IO Block: 4096 regular fileDevice: 803h/2051d Inode: 787752 Links: 1Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: (0/ root)Access: 2018-07-26 18:57:44.311586312 +0800Modify: 2018-07-25 18:48:32.693647980 +0800Change: 2018-07-25 18:48:32.693647980 +0800[root@localhost ~]# touch -m -t 201806300000.00 /etc/passwd[root@localhost ~]# stat /etc/passwdFile: `/etc/passwd&apos;Size: 1677 Blocks: 8 IO Block: 4096 regular fileDevice: 803h/2051d Inode: 787752 Links: 1Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)Access: 2018-07-26 18:57:44.311586312 +0800Modify: 2018-06-30 00:00:00.000000000 +0800Change: 2018-07-27 14:13:22.439425983 +0800 12. 复制：所谓的复制就是创建一个新的空文件，然后在将源文件的数 据流读出来，然后写进去。cp默认不复制目录下的内容，选项：-r：递归复制12341.cp [OPTION]... [-T] SOURCE DEST2.cp [OPTION]... SOURCE... DIRECTORY3.cp [OPTION]... -t DIRECTORY SOURCE...（2.3等同）4.cp SRC DEST SRC是文件： 如果目标不存在：新建DEST，并将SRC中内容填充至DEST中 如果目标存在： 如果DEST是文件：将SRC中的内容覆盖至DEST中。基于安全，建议为cp命令使用-i选项。 如果DEST是目录：在DEST下新建与原文件同名的文件，并 将SRC中内容填充至新文件中。 cp SRC… DEST SRC…：多个文件 DEST必须存在，且为目录，其它情形均会出错； cp SRC DEST SRC是目录：此时使用选项：-r 如果DEST不存在：则创建指定目录，复制SRC目录中所有文件 至DEST中； 如果DEST存在： 如果DEST是文件：报错 如果DEST是目录 cp的常用选项 1234567891011121314151617-i：覆盖前提示 –n:不覆盖，注意两者顺序-r, -R: 递归复制目录及内部的所有内容-a: 归档，相当于-dR --preserv=all-d：--no-dereference --preserv=links 不复制件，只 复制 链接名--preserv[=ATTR_LIST] （元数据信息） mode: 权限 ownership: 属主、属组 timestamp: （时间戳（atime、mtime不变）（cti会变）） links：链接属性 xattr：拓展属性 context：保持selinux的安全属性 all：以上所有-p: 等同--preserv=mode,ownership,timestamp-v: --verbose 显示提示信息-f: --force 强制-u:--update 只复制源比目标更新文件或目标不存在的文件--backup=numbered 目标存在，覆盖前先备份加数字后缀 cp命令中：具体的流程是： 分配一个空闲的inode号，在inode表中生成新条目，在目录中创建一个目录项，将名称inode编号关联拷贝数据生成新的文件。 13. 移动和重命名文件123mv [OPTION]... [-T] SOURCE DESTmv [OPTION]... SOURCE... DIRECTORYmv [OPTION]... -t DIRECTORY SOURCE... 常用选项： -i: 交互式 -f: 强制 mv操作时，具体的流程是： 如果mv命令的目标和源在相同的文件系统，作为mv 命令用新的文件名创建对应新的目录项，删除旧目录条目对应的旧的文件名，不影响inode（除时间戳）或磁盘上的数据位置：没有数据被移动！ 如果目标和源在一个不同的文件系统， mv相当于cp和rm。 14. 删除rm [OPTION]... FILE... 常用选项： -i: 交互式 -f: 强制删除 -r: 递归 –no-preserve-root : 强制删除/目录，忽略root示例： rm -rf / rm操作时候，具体的逻辑是： 链接数递减，从而释放的inode号可以被重用 把数据块放在空闲列表中 删除目录项 数据实际上不会马上被删除，但当另一个文件使用数据块时将被覆盖。 15. 目录操作tree 显示目录树 -d: 只显示类型为目录 -L level：指定显示的层级数目 -P ：pattern 只显示由指定pattern匹配到的路径123[root@localhost ~]# tree -P *Base* /etc/yum.repos.d//etc/yum.repos.d/└── CentOS-Base.repo mkdir 创建目录 -p: 存在于不报错，且可自动创建所需的各目录 -v: 显示详细信息 -m MODE: 创建目录时直接指定权限123[root@localhost ~]# mkdir -p -v -m 777 /tmp/cmkdir: created directory `/tmp/c&apos;[root@localhost ~]# rmdir 删除空目录 -p: 递归删除父空目录 -v: 显示详细信息 rm -r 递归删除目录树12345678910[root@localhost ~]# mkdir -p -v /tmp/x/y/zmkdir: created directory `/tmp/x&apos;mkdir: created directory `/tmp/x/y&apos;mkdir: created directory `/tmp/x/y/z&apos;[root@localhost ~]# rmdir -p -v /tmp/x/y/zrmdir: removing directory, `/tmp/x/y/z&apos;rmdir: removing directory, `/tmp/x/y&apos;rmdir: removing directory, `/tmp/x&apos;rmdir: removing directory, `/tmp&apos;rmdir: failed to remove directory `/tmp&apos;: Directory not empty 16. 索引节点inode（index node）表中包含文件系统所有文件列表一个节点 （索引节点）是在一个表项(inode table)，包含有关文件的信息（ 元数据 包括： 文件类型，权限，UID，GID 链接数（指向这个文件名路径名称个数） 该文件的大小和不同的时间戳 指向磁盘上文件的数据块指针 有关文件的其他数据 文件引用一个是 inode号 人是通过文件名来引用一个文件 一个目录是目录下的文件名和文件inode号之间的映射 17. 硬链接和软链接详细说明[https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/inde.html#listing1(https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/inde.html#listing1 “转载自IBM博客”) 1. 硬链接 创建硬链接会增加额外的记录项以引用文件 对应于同一文件系统上一个物理文件 每个目录引用相同的inode号 创建时链接数递增 删除文件时： rm命令递减计数的链接 文件要存在，至少有一个链接数 当链接数为零时，该文件被删除 不能跨越驱动器或分区 语法: ln filename [linkname ] 注意： 目录不能使用硬链接 2. 软链接 一个符号链接指向另一个文件 ls - l的 显示链接的名称和引用的文件 一个符号链接的内容是它引用文件的名称 可以对目录进行 可以跨分区 指向的是另一个文件的路径；其大小为指向的路径字符串的长度；不增 - 加或减目标文件inode的引用计数； 语法：ln -s filename ​​[linkname] 注意:加粗部分为硬链接和软链接的核心区别。 18. 确定文件内容文件可以包含多种类型的数据检查文件的类型，然后确定适当的打开命令或应用程序使用 语法：file [options] &lt;filename&gt;... 常用选项: -b 列出文件辨识结果时，不显示文件名称 -f filelist 列出文件filelist中文件名的文件类型 -F 使用指定分隔符号替换输出文件名后默认的”:”分隔符 -L 查看对应软链接对应文件的文件类型 –help 显示命令在线帮助 19. 标准输入与输出 程序：指令+数据 读入数据：Input 输出数据：Output 打开的文件都有一个fd: file descriptor (文件描述符) Linux给程序提供三种I/O设备 标准输入（STDIN）－0 默认接受来自键盘的输入 标准输出（STDOUT）－1 默认输出到终端窗口 标准错误（STDERR）－2 默认输出到终端窗口 I/O重定向：改变默认位置 输入重定向： 12345[root@localhost ~]# cat &gt; /tmp/luoq.txt &lt;&lt;EOF&gt; woshishui&gt; EOF[root@localhost ~]# cat /tmp/luoq.txtwoshishui 20. 把输出和错误重新定向到文件 STDOUT和STDERR可以被重定向到文件 命令 操作符号 文件名 支持的操作符号包括： > 把STDOUT重定向到文件 2&gt; 把STDERR重定向到文件 &amp;&gt; 把所有输出重定向到文件12345678910[root@localhost ~]# touch /tmp/error.txt;cat /tmp/luo.txt1 2&gt;/tmp/error.txt[root@localhost ~]# cat /tmp/error.txtcat: /tmp/luo.txt1: No such file or directory[root@localhost ~]# [root@localhost ~]# cat /tmp/luoq.txt &amp;&gt; /tmp/error.txt[root@localhost ~]# cat /tmp/error.txtwoshishui[root@localhost ~]# cat /tmp/luoq.txt11 &amp;&gt; /tmp/error.txt[root@localhost ~]# cat /tmp/error.txtcat: /tmp/luoq.txt11: No such file or directory > 文件内容会被覆盖 set –C 禁止将内容覆盖已有文件,但可追加 >| file 强制覆盖 set +C 允许覆盖 >&gt; 原有内容基础上，追加内容 2&gt; 覆盖重定向错误输出数据流 2&gt;&gt; 追加重定向错误输出数据流 标准输出和错误输出各自定向至不同位置 COMMAND &gt; /path/to/file.out 2&gt;/path/to/error.out 合并标准输出和错误输出为同一个数据流进行重定向 &amp;&gt; 覆盖重定向 &amp;&gt;&gt; 追加重定向 COMMAND &gt; /path/to/file.out 2&gt;&amp;1 （顺序很重要） COMMAND &gt;&gt; /path/to/file.out 2&gt;&amp;1 ()：合并多个程序的STDOUT ( cal 2007 ; cal 2008 ) &gt; all. 21. tr命令tr 转换和删除字符 语法:tr [OPTION]... SET1 [SET2] 选项： -c –C –complement：取字符集的补集 -d –delete：删除所有属于第一字符集的字符 -s –squeeze-repeats：把连续重复的字符以单独一个字符表示 -t –truncate-set1：将第一个字符集对应字符转化为第二字符集对应的字符 [:alnum:]：字母和数字 [:alpha:]：字母 [:cntrl:]：控制（非打印）字符 [:digit:]：数字 [:graph:]：图形字符 [:lower:]：小写字母 [:print:]：可打印字符 [:punct:]：标点符号 [:space:]：空白字符 [:upper:]：大写字母 [:xdigit:]：十六进制字符 例如：tr ‘a-z’ ‘A-Z’&lt; /etc/issue 22. 管道 管道（使用符号“|”表示）用来连接命令 命令1 | 命令2 | 命令3 | … 将命令1的STDOUT发送给命令2的STDIN，命令2的STDOUT送到命令3的STDIN STDERR默认不能通过管道转发，可利用2&gt;&amp;1 或 |&amp; 实现 最后一个命令会在当前shell进程的子shell进程中执行来 组合多种工具的功能 ls | tr ‘a-z’ ‘A-Z’ 有些命令不支持管道传输过来的数据，可以加上 - 执行 23. tee命令，一路输入两路输出 命令1 | tee [-a ] 文件名 | 命令2 把命令1的STDOUT保存在文件中，做为命令2的输入 -a 追加 使用： 保存不同阶段的输出 复杂管道的故障排除 同时查看和记录输出 例如：[root@localhost ~]# cat /etc/passwd | tr -d &#39;abc&#39; | tr &#39;d-z&#39; &#39;D-Z&#39; | tee /tmp/luo.txt 24. selinux：安全Linux策略 配置文件在/etc/selinux/config ： 查看状态的命令：getenforce 三种状态： enforcing：强制：违反规则不能运行 permissive许可：可以允许运行，但是会记录，用来后期的审计 disabled：禁用：关闭selinux 25. 历史命令：history的环境变量配置：HISTCONTROL -ignoredups（忽略重复） -ignorespace（忽略空格） -ignoreboth（忽略所有) 26.权限认证；授权：审计 Authentication；Authorization；Adition","categories":[{"name":"Linux","slug":"Linux","permalink":"http://luoqian67.github.io/blog/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://luoqian67.github.io/blog/tags/Linux/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://luoqian67.github.io/blog/categories/Linux/"}]},{"title":"在Windows10中给右键中添加新建的方式","slug":"在Windows10中添加新建的右键","date":"2018-07-26T12:15:17.000Z","updated":"2018-08-07T02:56:55.940Z","comments":true,"path":"2018/07/26/在Windows10中添加新建的右键/","link":"","permalink":"http://luoqian67.github.io/blog/2018/07/26/在Windows10中添加新建的右键/","excerpt":"","text":"使用管理员权限打开window命令提示符输入如下即可cmd /k reg add &quot;HKEY_CLASSES_ROOT\\Directory\\Background\\shellex\\ContextMenuHandlers\\New&quot; /ve /t REG_SZ /d {D969A300-E7FF-11d0-A93B-00A0C90F2719} /f","categories":[{"name":"杂项教程","slug":"杂项教程","permalink":"http://luoqian67.github.io/blog/categories/杂项教程/"}],"tags":[{"name":"windows","slug":"windows","permalink":"http://luoqian67.github.io/blog/tags/windows/"}],"keywords":[{"name":"杂项教程","slug":"杂项教程","permalink":"http://luoqian67.github.io/blog/categories/杂项教程/"}]},{"title":"在eclipse中部署项目web有时候访问jsp会抛出以下类似的异常信息","slug":"在eclipse中部署项目web有时候访问jsp会抛出以下类似的异常信息","date":"2018-07-25T12:58:17.000Z","updated":"2018-08-07T02:56:31.974Z","comments":true,"path":"2018/07/25/在eclipse中部署项目web有时候访问jsp会抛出以下类似的异常信息/","link":"","permalink":"http://luoqian67.github.io/blog/2018/07/25/在eclipse中部署项目web有时候访问jsp会抛出以下类似的异常信息/","excerpt":"","text":"在eclipse中部署项目web有时候访问jsp会抛出以下类似的异常信息org.apache.jasper.JasperException: The absolute uri: http://java.sun.com/jsp 部署web项目，如果抛出此异常。请保证 standard.jar与jstl.jar 两个jar包是否 在部署的项目中存在，如果不存在，请把，这两个包加入 /WEB-INF/lib 中。然后保证jsp中引用的版本地址 和 此版本地址是一致的： &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot;prefix=&quot;c&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot;prefix=&quot;f&quot;%&gt;&lt;%@ taglib prefix=&quot;fn&quot;uri=&quot;http://java.sun.com/jsp/jstl/functions&quot;%&gt; CSDN下载路径：https://download.csdn.net/download/weixin_42216574/10416519","categories":[{"name":"杂项教程","slug":"杂项教程","permalink":"http://luoqian67.github.io/blog/categories/杂项教程/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://luoqian67.github.io/blog/tags/Java/"},{"name":"eclipse","slug":"eclipse","permalink":"http://luoqian67.github.io/blog/tags/eclipse/"}],"keywords":[{"name":"杂项教程","slug":"杂项教程","permalink":"http://luoqian67.github.io/blog/categories/杂项教程/"}]}]}